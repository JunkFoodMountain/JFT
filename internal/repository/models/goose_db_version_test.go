// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooseDBVersions(t *testing.T) {
	t.Parallel()

	query := GooseDBVersions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooseDBVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooseDBVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooseDBVersions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooseDBVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooseDBVersionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooseDBVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooseDBVersionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GooseDBVersion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooseDBVersionExists to return true, but got false.")
	}
}

func testGooseDBVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gooseDBVersionFound, err := FindGooseDBVersion(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gooseDBVersionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooseDBVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooseDBVersions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooseDBVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooseDBVersions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooseDBVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gooseDBVersionOne := &GooseDBVersion{}
	gooseDBVersionTwo := &GooseDBVersion{}
	if err = randomize.Struct(seed, gooseDBVersionOne, gooseDBVersionDBTypes, false, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, gooseDBVersionTwo, gooseDBVersionDBTypes, false, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gooseDBVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gooseDBVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooseDBVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooseDBVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gooseDBVersionOne := &GooseDBVersion{}
	gooseDBVersionTwo := &GooseDBVersion{}
	if err = randomize.Struct(seed, gooseDBVersionOne, gooseDBVersionDBTypes, false, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, gooseDBVersionTwo, gooseDBVersionDBTypes, false, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gooseDBVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gooseDBVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gooseDBVersionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func gooseDBVersionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseDBVersion) error {
	*o = GooseDBVersion{}
	return nil
}

func testGooseDBVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooseDBVersion{}
	o := &GooseDBVersion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion object: %s", err)
	}

	AddGooseDBVersionHook(boil.BeforeInsertHook, gooseDBVersionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionBeforeInsertHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.AfterInsertHook, gooseDBVersionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionAfterInsertHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.AfterSelectHook, gooseDBVersionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionAfterSelectHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.BeforeUpdateHook, gooseDBVersionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionBeforeUpdateHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.AfterUpdateHook, gooseDBVersionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionAfterUpdateHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.BeforeDeleteHook, gooseDBVersionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionBeforeDeleteHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.AfterDeleteHook, gooseDBVersionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionAfterDeleteHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.BeforeUpsertHook, gooseDBVersionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionBeforeUpsertHooks = []GooseDBVersionHook{}

	AddGooseDBVersionHook(boil.AfterUpsertHook, gooseDBVersionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gooseDBVersionAfterUpsertHooks = []GooseDBVersionHook{}
}

func testGooseDBVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooseDBVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gooseDBVersionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooseDBVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooseDBVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooseDBVersionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooseDBVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooseDBVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gooseDBVersionDBTypes = map[string]string{`ID`: `integer`, `VersionID`: `bigint`, `IsApplied`: `boolean`, `Tstamp`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testGooseDBVersionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gooseDBVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gooseDBVersionAllColumns) == len(gooseDBVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooseDBVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gooseDBVersionAllColumns) == len(gooseDBVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooseDBVersion{}
	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gooseDBVersionDBTypes, true, gooseDBVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gooseDBVersionAllColumns, gooseDBVersionPrimaryKeyColumns) {
		fields = gooseDBVersionAllColumns
	} else {
		fields = strmangle.SetComplement(
			gooseDBVersionAllColumns,
			gooseDBVersionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooseDBVersionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooseDBVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(gooseDBVersionAllColumns) == len(gooseDBVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooseDBVersion{}
	if err = randomize.Struct(seed, &o, gooseDBVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooseDBVersion: %s", err)
	}

	count, err := GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gooseDBVersionDBTypes, false, gooseDBVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooseDBVersion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooseDBVersion: %s", err)
	}

	count, err = GooseDBVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
